
           This is a report template file.

It can be used to create simple run summary/statistics output files.

To produce a report, put in your analysis steering script, the line 

   analyzer->PrintReport(templatefilename, reportfilename); 

where analyzer is your analyzer object.

The template file is copied to the output file, except that anything
inside of the braces gets evaluated.  If the braces contain a string variable,
the value of variable replaces the braced name.  Otherwise what is
in the braces is evaluated as an expression.  Currently the expression can be
composed of Hall C style parameter variables, cut results (not really too usefull)
and cut statistics.  (Number of times called and number of times passed.)

For example, {100*Pedestal_event.npassed/Pedestal_event.ncalled:%.2f}% is the 
percentage of events that were pedestal events.
Number of pedestal events:  {Pedestal_event.npassed}  {Pedestal_event.ncalled}
Number of HMS events:  {HMS_event.npassed}  {HMS_event.ncalled}
Number of scalar   events:  {scalar_event.npassed}  {scalar_event.ncalled}
Number of hfoundtrack  events:  {hFoundTrack.npassed}  
 hFoundTrack/Number of HMS events: {hFoundTrack.npassed/HMS_event.npassed:%.5f}


*****************************
* HMS TRACKING EFFICIENCIES *
*****************************
htrig                          :   {hmscoin_event.npassed}
hhitslt = passed hits/cham     :   {hmsHitsLt.npassed}
hhitsplanes = +planes >= 5/6   :   {hmsHitsPlanes.npassed}
hhitsplanessps = + sps         :   {hSpacePoints.npassed}
hhitsplanesspsstubs +stub      :   {hSpacePointsStub.npassed}
hsfoundtrack                   :   {hFoundTrack.npassed}
hstublt = passed stub tests    :   {hStubLT.npassed}
h1hitslt                       :   {hms1HitsLt.npassed}
h2hitslt                       :   {hms2HitsLt.npassed}
h1planesgt                     :   {hmsDC1PlanesGT.npassed}
h2planesgt                     :   {hmsDC2PlanesGT.npassed}
hplanesgt = gt 5 planes/cham   :   {hmsPlanseGT.npassed}
f1hspacepoints                 :   {f1HSpacePoints.npassed}
f2hspacepoints                 :   {f2HSpacePoints.npassed}
htest1=p hits/planes, f sp     :   {hTest1.npassed}
htest2=p sp, f stubs           :   {hTest2.npassed}
hdid                           :   {HMSScinDid.npassed}
hdide                          :   {HMSScinDide.npassed}
hdidh                          :   {HMSScinDidh.npassed}
hscinshould                    :   {HMSScinShould.npassed}
hscinshoulde                   :   {HMSScinShoulde.npassed}
hscinshouldh                   :   {HMSScinShouldh.npassed}
SING FID TRACK EFFIC           : {HMSScinDid.npassed/(HMSScinShould.npassed+0.0001):%8.4f} +- {(sqrt(HMSScinShould.npassed-HMSScinDid.npassed)/(HMSScinShould.npassed+.0001)):%8.4f}
E SING FID TRACK EFFIC         : {HMSScinDide.npassed/(HMSScinShoulde.npassed+0.0001):%8.4f} +- {(sqrt(HMSScinShoulde.npassed-HMSScinDide.npassed)/(HMSScinShoulde.npassed+.0001)):%8.4f}
HADRON SING FID TRACK EFFIC    : {HMSScinDidh.npassed/(HMSScinShouldh.npassed+0.0001):%8.4f} +- {(sqrt(HMSScinShouldh.npassed-HMSScinDidh.npassed)/(HMSScinShouldh.npassed+.0001)):%8.4f}

* hms coincidences...
ctrig                          :   {coin_event.npassed}
bhhitslt = passed hits/cham    :   {bhmsHitsLt.npassed}
bhhitsplanes = +planes >= 5/6  :   {bhmsHitsPlanes.npassed}
bhhitsplanessps = + sps        :   {bhmsHitsPlanesSps.npassed}
bhhitsplanesspsstubs +stub     :   {bhmsHitsPlanesSpsStubs.npassed}
found track and ctrig          :   {bhmsFoundTrack.npassed}
bhstublt = passed stub tests   :   {bhmsStubLt.npassed}
bh1hitslt                      :   {bhms1HitsLt.npassed}
bh2hitslt                      :   {bhms2HitsLt.npassed}
bh1planesgt                    :   {bhmsDC1PlanesGT.npassed}
bh2planesgt                    :   {bhmsDC2PlanesGT.npassed}
bhplanesgt = gt 5 planes/cham  :   {bhmsPlanesGt.npassed}
f1bhspacepoints                :   {f1bhmsSpacepoints.npassed}
f2bhspacepoints                :   {f2bhmsSpacepoints.npassed}
bhtest1=p hits/planes, f sp    :   {bhmsTest1.npassed}
bhtest2=p sp, f stubs          :   {bhmsTest2.npassed}
bhdid                          :   {BHMSScinDid.npassed}
bhdide                         :   {BHMSScinDide.npassed}
bhdidh                         :   {BHMSScinDidh.npassed}
bhscinshould                   :   {BHMSScinShould.npassed}
bhscinshoulde                  :   {BHMSScinShoulde.npassed}
bhscinshouldh                  :   {BHMSScinShouldh.npassed}
COIN FID TRACK EFFIC           : {BHMSScinDid.npassed/(BHMSScinShould.npassed+0.0001):%8.4f} +- {(sqrt(BHMSScinShould.npassed-BHMSScinDid.npassed)/(BHMSScinShould.npassed+.0001)):%8.4f}
E COIN FID TRACK EFFIC         : {BHMSScinDide.npassed/(BHMSScinShoulde.npassed+0.0001):%8.4f} +- {(sqrt(BHMSScinShoulde.npassed-BHMSScinDide.npassed)/(BHMSScinShoulde.npassed+.0001)):%8.4f}
HADRON COIN FID TRACK EFFIC    : {BHMSScinDidh.npassed/(BHMSScinShouldh.npassed+0.0001):%8.4f} +- {(sqrt(BHMSScinShouldh.npassed-BHMSScinDidh.npassed)/(BHMSScinShouldh.npassed+.0001)):%8.4f}
********************************************************************


*****************************
* RAW SOFTWARE EFFICIENCIES *
*****************************
"raw"  means one or more hits per dc plane.
"Good" means one or two  hits per dc plane.

rawhdc1x1   =    {h1hit1.npassed}   eff = {(h1hit1.npassed/hmsCham1Hits.npassed):%5.3f}  BAD = 0.95
rawhdc1y1   =    {h1hit2.npassed}   eff = {(h1hit2.npassed/hmsCham1Hits.npassed):%5.3f}  BAD = 0.95
rawhdc1u1   =    {h1hit3.npassed}   eff = {(h1hit3.npassed/hmsCham1Hits.npassed):%5.3f}  BAD = 0.95
rawhdc1v1   =    {h1hit4.npassed}   eff = {(h1hit4.npassed/hmsCham1Hits.npassed):%5.3f}  BAD = 0.95
rawhdc1y2   =    {h1hit5.npassed}   eff = {(h1hit5.npassed/hmsCham1Hits.npassed):%5.3f}  BAD = 0.95
rawhdc1x2   =    {h1hit6.npassed}   eff = {(h1hit6.npassed/hmsCham1Hits.npassed):%5.3f}  BAD = 0.95
rawhdc1     =    {hmsCham1Hits.npassed}   eff = {(hdc_cham_hits[0]/hmsCham1Hits.npassed):%5.3f}  BAD = 0.99
rawhdc2x1   =    {h2hit1.npassed}   eff = {(h2hit1.npassed/hmsCham2Hits.npassed):%5.3f}  BAD = 0.95
rawhdc2y1   =    {h2hit2.npassed}   eff = {(h2hit2.npassed/hmsCham2Hits.npassed):%5.3f}  BAD = 0.95
rawhdc2y1   =    {h2hit3.npassed}   eff = {(h2hit3.npassed/hmsCham2Hits.npassed):%5.3f}  BAD = 0.95
rawhdc2v1   =    {h2hit4.npassed}   eff = {(h2hit4.npassed/hmsCham2Hits.npassed):%5.3f}  BAD = 0.95
rawhdc2y2   =    {h2hit5.npassed}   eff = {(h2hit5.npassed/hmsCham2Hits.npassed):%5.3f}  BAD = 0.95
rawhdc2x2   =    {h2hit6.npassed}   eff = {(h2hit6.npassed/hmsCham2Hits.npassed):%5.3f}  BAD = 0.95
rawhdc2     =    {hmsCham2Hits.npassed}   eff = {(hdc_cham_hits[1]/hmsCham2Hits.npassed):%5.3f}  BAD = 0.99

goodhdc1x1  =   {goodHDC1x1.npassed}   eff = {(goodHDC1x1.npassed/(hmscoin_event.npassed+0.0001)):%5.3f}  BAD = 0.95
goodhdc1y1  =   {goodHDC1y1.npassed}   eff = {(goodHDC1y1.npassed/(hmscoin_event.npassed+0.0001)):%5.3f}  BAD = 0.95
goodhdc1u1  =   {goodHDC1u1.npassed}   eff = {(goodHDC1u1.npassed/(hmscoin_event.npassed+0.0001)):%5.3f}  BAD = 0.95
goodhdc1v1  =   {goodHDC1v1.npassed}   eff = {(goodHDC1v1.npassed/(hmscoin_event.npassed+0.0001)):%5.3f}  BAD = 0.95
goodhdc1y2  =   {goodHDC1y2.npassed}   eff = {(goodHDC1y2.npassed/(hmscoin_event.npassed+0.0001)):%5.3f}  BAD = 0.95
goodhdc1x2  =   {goodHDC1x2.npassed}   eff = {(goodHDC1x2.npassed/(hmscoin_event.npassed+0.0001)):%5.3f}  BAD = 0.95
goodhdc1    =   {goodHDC1.npassed}   eff = {(goodHDC1.npassed/(hmscoin_event.npassed+0.0001)):%5.3f}  BAD = 0.90
goodhdc2x1  =   {goodHDC2x1.npassed}   eff = {(goodHDC2x1.npassed/(hmscoin_event.npassed+0.0001)):%5.3f}  BAD = 0.95
goodhdc2x1  =   {goodHDC2y1.npassed}   eff = {(goodHDC2y1.npassed/(hmscoin_event.npassed+0.0001)):%5.3f}  BAD = 0.95
goodhdc2x1  =   {goodHDC2u1.npassed}   eff = {(goodHDC2u1.npassed/(hmscoin_event.npassed+0.0001)):%5.3f}  BAD = 0.95
goodhdc2x1  =   {goodHDC2v1.npassed}   eff = {(goodHDC2v1.npassed/(hmscoin_event.npassed+0.0001)):%5.3f}  BAD = 0.95
goodhdc2x1  =   {goodHDC2y2.npassed}   eff = {(goodHDC2y2.npassed/(hmscoin_event.npassed+0.0001)):%5.3f}  BAD = 0.95
goodhdc2x1  =   {goodHDC2x2.npassed}   eff = {(goodHDC2x2.npassed/(hmscoin_event.npassed+0.0001)):%5.3f}  BAD = 0.95
goodhdc2    =   {goodHDC2.npassed}   eff = {(goodHDC2.npassed/(hmscoin_event.npassed+0.0001)):%5.3f}  BAD = 0.90
bothgoodhdc =   {bothGood.npassed}   eff = {(bothGood.npassed/(hmscoin_event.npassed+0.0001)):%5.3f}  BAD = 0.80

"hfoundtrack" based on analyzer variable HNTRACKS_FP.
"hcleantrack" based on analyzer variable HSNUM_FPTRACK (=foundtrack+chi2+PID).

hfoundtrack  = {hFoundTrack.npassed:%7d}   eff = {hFoundTrack.npassed/(hmscoin_event.npassed+0.0001):%5.3f}  BAD = .95
hfound1track = {hFound1Track.npassed:%7d}   eff = {hFound1Track.npassed/(hmscoin_event.npassed+.0001):%5.3f}
hfound2track = {hFound2Track.npassed:%7d}   eff = {hFound2Track.npassed/(hmscoin_event.npassed+.0001):%5.3f}
hfound3track = {hFound3Track.npassed:%7d}   eff = {hFound3Track.npassed/(hmscoin_event.npassed+.0001):%5.3f}
hfound4track = {hFound4Track.npassed:%7d}   eff = {hFound4Track.npassed/(hmscoin_event.npassed+.0001):%5.3f}

hcleantrack  = {hCleanTrack.npassed:%7d}   eff = {hCleanTrack.npassed/(hmscoin_event.npassed+0.0001):%5.3f}  BAD = .95
1hcleantrack = {1hCleanTrack.npassed:%7d}   eff = {1hCleanTrack.npassed/(hmscoin_event.npassed+0.0001):%5.3f}
2hcleantrack = {2hCleanTrack.npassed:%7d}   eff = {2hCleanTrack.npassed/(hmscoin_event.npassed+0.0001):%5.3f}
3hcleantrack = {3hCleanTrack.npassed:%7d}   eff = {3hCleanTrack.npassed/(hmscoin_event.npassed+0.0001):%5.3f}
4hcleantrack = {4hCleanTrack.npassed:%7d}   eff = {4hCleanTrack.npassed/(hmscoin_event.npassed+0.0001):%5.3f}

"Any"  means one or more hits per scint plane.
"Good" means one or two  hits per scint plane.

anyhs1x     = {anyhs1x.npassed:%7d}   eff = {anyhs1x.npassed/(hmscoin_event.npassed+.0001):%5.3f}  BAD = .99
anyhs1y     = {anyhs1y.npassed:%7d}   eff = {anyhs1y.npassed/(hmscoin_event.npassed+.0001):%5.3f}  BAD = .99
anyhs2x     = {anyhs2x.npassed:%7d}   eff = {anyhs2x.npassed/(hmscoin_event.npassed+.0001):%5.3f}  BAD = .99
anyhs2y     = {anyhs2y.npassed:%7d}   eff = {anyhs2y.npassed/(hmscoin_event.npassed+.0001):%5.3f}  BAD = .99

goodhs1x    = {goodhs1x.npassed:%7d}   eff = {goodhs1x.npassed/(hmscoin_event.npassed+.0001):%5.3f}  BAD = .98
goodhs1y    = {goodhs1y.npassed:%7d}   eff = {goodhs1y.npassed/(hmscoin_event.npassed+.0001):%5.3f}  BAD = .98
goodhs1     = {goodhs1.npassed:%7d}   eff = {goodhs1.npassed/(hmscoin_event.npassed+.0001):%5.3f}  BAD = .96
goodhs2x    = {goodhs2x.npassed:%7d}   eff = {goodhs2x.npassed/(hmscoin_event.npassed+.0001):%5.3f}  BAD = .98
goodhs2y    = {goodhs2y.npassed:%7d}   eff = {goodhs2y.npassed/(hmscoin_event.npassed+.0001):%5.3f}  BAD = .98
goodhs2     = {goodhs2.npassed:%7d}   eff = {goodhs2.npassed/(hmscoin_event.npassed+.0001):%5.3f}  BAD = .96
goodhs1s2   = {goodhs1s2.npassed:%7d}   eff = {goodhs1s2.npassed/(hmscoin_event.npassed+.0001):%5.3f}  BAD = .95


********************
* HARDWARE SCALERS *
********************
General Format:
signal   =   counts (  rate-Hz )

S1       = {HSS1:%15.1f} [ {HSS1/HShCLOCK*1.0e6:%9.1f} ]
S2       = {HSS2:%15.1f} [ {HSS2/HShCLOCK*1.0e6:%9.1f} ]
S1X      = {HSS1X:%15.1f} [ {HSS1X/HShCLOCK*1.0e6:%9.1f} ]
S1Y      = {HSS1Y:%15.1f} [ {HSS1Y/HShCLOCK*1.0e6:%9.1f} ]
S2X      = {HSS2X:%15.1f} [ {HSS2X/HShCLOCK*1.0e6:%9.1f} ]
S2Y      = {HSS2Y:%15.1f} [ {HSS2Y/HShCLOCK*1.0e6:%9.1f} ]

hS1X     = {HShS1X:%15.1f} [ {HShS1X/HShCLOCK*1.0e6:%9.1f} ]
hS1Y     = {HShS1Y:%15.1f} [ {HShS1Y/HShCLOCK*1.0e6:%9.1f} ]
hS2X     = {HShS2X:%15.1f} [ {HShS2X/HShCLOCK*1.0e6:%9.1f} ]
hS2Y     = {HShS2Y:%15.1f} [ {HShS2Y/HShCLOCK*1.0e6:%9.1f} ]
hS1      = {HShS1:%15.1f} [ {HShS1/HShCLOCK*1.0e6:%9.1f} ]
hS2      = {HShS2:%15.1f} [ {HShS2/HShCLOCK*1.0e6:%9.1f} ]
hSTOF    = {HShSTOF:%15.1f} [ {HShSTOF/HShCLOCK*1.0e6:%9.1f} ]
hSCIN    = {HShSCIN:%15.1f} [ {HShSCIN/HShCLOCK*1.0e6:%9.1f} ]
hPRHI    = {HShPRHI:%15.1f} [ {HShPRHI/HShCLOCK*1.0e6:%9.1f} ]
hPRLO    = {HShPRLO:%15.1f} [ {HShPRLO/HShCLOCK*1.0e6:%9.1f} ]
hSHLO    = {HShSHLO:%15.1f} [ {HShSHLO/HShCLOCK*1.0e6:%9.1f} ]
hCER     = {HShCER:%15.1f} [ {HShCER/HShCLOCK*1.0e6:%9.1f} ]
hELHI    = {HShELHI:%15.1f} [ {HShELHI/HShCLOCK*1.0e6:%9.1f} ]
hELLO    = {HShELLO:%15.1f} [ {HShELLO/HShCLOCK*1.0e6:%9.1f} ]
hPION    = {HShPION:%15.1f} [ {HShPION/HShCLOCK*1.0e6:%9.1f} ]
hPIPRE   = {HShPIPRE:%15.1f} [ {HShPIPRE/HShCLOCK*1.0e6:%9.1f} ]
hELREAL  = {HShELREAL:%15.1f} [ {HShELREAL/HShCLOCK*1.0e6:%9.1f} ]
hELCLEAN = {HShELCLEAN:%15.1f} [ {HShELCLEAN/HShCLOCK*1.0e6:%9.1f} ]
hPRETRG  = {HShPRETRG:%15.1f} [ {HShPRETRG/HShCLOCK*1.0e6:%9.1f} ]
hPIONHI  = {HShPIONHI:%15.1f} [ {HShPIONHI/HShCLOCK*1.0e6:%9.1f} ]
hCERHI   = {HShCERHI:%15.1f} [ {HShCERHI/HShCLOCK*1.0e6:%9.1f} ]
HMSPRE   = {HSHMSPRE:%15.1f} [ {HSHMSPRE/HShCLOCK*1.0e6:%9.1f} ]
HMSTRG   = {HSHMSTRG:%15.1f} [ {HSHMSTRG/HShCLOCK*1.0e6:%9.1f} ]
hADCGATES= {HShADCGATES:%15.1f} [ {HShADCGATES/HShCLOCK*1.0e6:%9.1f} ]
hPRE50   = {HShPRE50:%15.1f} [ {HShPRE50/HShCLOCK*1.0e6:%9.1f} ]
hPRE100  = {HShPRE100:%15.1f} [ {HShPRE100/HShCLOCK*1.0e6:%9.1f} ]
hPRE150  = {HShPRE150:%15.1f} [ {HShPRE150/HShCLOCK*1.0e6:%9.1f} ]
hPRE200  = {HShPRE200:%15.1f} [ {HShPRE200/HShCLOCK*1.0e6:%9.1f} ]
UNSER    = {HShUNSER:%15.1f} [ {HShUNSER/HShCLOCK*1.0e6:%9.1f} ]
BCM1     = {HShBCM1:%15.1f} [ {HShBCM1/HShCLOCK*1.0e6:%9.1f} ]
BCM2     = {HShBCM2:%15.1f} [ {HShBCM2/HShCLOCK*1.0e6:%9.1f} ]
CLOCK    = {HShCLOCK:%15.1f} [ {HShCLOCK/HShCLOCK*1.0e6:%9.1f} ]
BEAMGATES= {HShBEAMGATES:%15.1f} [ {HShBEAMGATES/HShCLOCK*1.0e6:%9.1f} ]

hcomp L.T= {100*(HSHMSTRG/(HSHMSPRE+.0001)):%9.2f} %
helec.D.T= {100*(60/50)*(HShPRE100-HShPRE150)/(HShPRE100+.0001):%9.2f} %

sS1X     = {HSsS1X:%15.1f} [ {HSsS1X/HSsCLOCK*1.0e6:%9.1f} ]
sS1Y     = {HSsS1Y:%15.1f} [ {HSsS1Y/HSsCLOCK*1.0e6:%9.1f} ]
sS2X     = {HSsS2X:%15.1f} [ {HSsS2X/HSsCLOCK*1.0e6:%9.1f} ]
sS2Y     = {HSsS2Y:%15.1f} [ {HSsS2Y/HSsCLOCK*1.0e6:%9.1f} ]
sS1      = {HSsS1:%15.1f} [ {HSsS1/HSsCLOCK*1.0e6:%9.1f} ]
sS2      = {HSsS2:%15.1f} [ {HSsS2/HSsCLOCK*1.0e6:%9.1f} ]
sSTOF    = {HSsSTOF:%15.1f} [ {HSsSTOF/HSsCLOCK*1.0e6:%9.1f} ]
sSCIN    = {HSsSCIN:%15.1f} [ {HSsSCIN/HSsCLOCK*1.0e6:%9.1f} ]
sPRHI    = {HSsPRHI:%15.1f} [ {HSsPRHI/HSsCLOCK*1.0e6:%9.1f} ]
sPRLO    = {HSsPRLO:%15.1f} [ {HSsPRLO/HSsCLOCK*1.0e6:%9.1f} ]
sSHLO    = {HSsSHLO:%15.1f} [ {HSsSHLO/HSsCLOCK*1.0e6:%9.1f} ]
sCER     = {HSsCER:%15.1f} [ {HSsCER/HSsCLOCK*1.0e6:%9.1f} ]
sELHI    = {HSsELHI:%15.1f} [ {HSsELHI/HSsCLOCK*1.0e6:%9.1f} ]
sELLO    = {HSsELLO:%15.1f} [ {HSsELLO/HSsCLOCK*1.0e6:%9.1f} ]
sPION    = {HSsPION:%15.1f} [ {HSsPION/HSsCLOCK*1.0e6:%9.1f} ]
sPIPRE   = {HSsPIPRE:%15.1f} [ {HSsPIPRE/HSsCLOCK*1.0e6:%9.1f} ]
sELREAL  = {HSsELREAL:%15.1f} [ {HSsELREAL/HSsCLOCK*1.0e6:%9.1f} ]
sELCLEAN = {HSsELCLEAN:%15.1f} [ {HSsELCLEAN/HSsCLOCK*1.0e6:%9.1f} ]
sPRETRG  = {HSsPRETRG:%15.1f} [ {HSsPRETRG/HSsCLOCK*1.0e6:%9.1f} ]
SOSPRE   = {HSSOSPRE:%15.1f} [ {HSSOSPRE/HSsCLOCK*1.0e6:%9.1f} ]
SOSTRG   = {HSSOSTRG:%15.1f} [ {HSSOSTRG/HSsCLOCK*1.0e6:%9.1f} ]
sADCGATES= {HSsADCGATES:%15.1f} [ {HSsADCGATES/HSsCLOCK*1.0e6:%9.1f} ]
sPRE50   = {HSsPRE50:%15.1f} [ {HSsPRE150/HSsCLOCK*1.0e6:%9.1f} ]
sPRE100  = {HSsPRE100:%15.1f} [ {HSsPRE100/HSsCLOCK*1.0e6:%9.1f} ]
sPRE150  = {HSsPRE150:%15.1f} [ {HSsPRE150/HSsCLOCK*1.0e6:%9.1f} ]
sPRE200  = {HSsPRE200:%15.1f} [ {HSsPRE200/HSsCLOCK*1.0e6:%9.1f} ]
BCM1     = {HSsBCM1:%15.1f} [ {HSsBCM1/HSsCLOCK*1.0e6:%9.1f} ]
BCM2     = {HSsBCM2:%15.1f} [ {HSsBCM2/HSsCLOCK*1.0e6:%9.1f} ]
CLOCK    = {HSsCLOCK:%15.1f} [ {HSsCLOCK/HSsCLOCK*1.0e6:%9.1f} ]

scomp D.T= {100*(HSSOSTRG/(HSSOSPRE+.0001)):%9.2f} %
selec.D.T= {100*(60/50)*(HSsPRE100-HSsPRE150)/(HSsPRE100+.0001):%9.2f} %

COINPRE  = {HSCOINPRE:%15.1f} [ {HSCOINPRE/HSsCLOCK*1.0e6:%9.1f} ]
PEDPRE   = {HSPEDPRE:%15.1f} [ {HSPEDPRE/HSsCLOCK*1.0e6:%9.1f} ]
COINTRG  = {HSCOINTRG:%15.1f} [ {HSCOINTRG/HSsCLOCK*1.0e6:%9.1f} ]
PEDTRG   = {HSPEDTRG:%15.1f} [ {HSPEDTRG/HSsCLOCK*1.0e6:%9.1f} ]

***************************
*OTHER SCALER INFORMATION *
***************************

all adcgates= {HShBEAMGATES:%8d} [ {HShBEAMGATES/HSsCLOCK*1.0e6:%7.1f} ]
hms adcgates= {HShADCGATES:%8d} [ {HShADCGATES/HSsCLOCK*1.0e6:%7.1f} ]
sos adcgates= {HSsADCGATES:%8d} [ {HSsADCGATES/HSsCLOCK*1.0e6:%7.1f} ]
==> coin adc= {(HShADCGATES+HSsADCGATES-HShBEAMGATES):%8d} [ {(HShADCGATES+HSsADCGATES-HShBEAMGATES)/HSsCLOCK*1.0e6:%7.1f} ]

hPRE      = {HSHMSPRE:%15.1f} [ {HSHMSPRE/HSsCLOCK*1.0e6:%7.1f} ]
hPRE2     = {HSSHODO9:%15.1f} [ {HSSHODO9/HSsCLOCK*1.0e6:%7.1f} ] (from SOS scaler)
hPRE3     = {HShPRETRG:%15.1f} [ {HShPRETRG/HSsCLOCK*1.0e6:%7.1f} ] (HShPRETRG)
hTRG      = {HSHMSTRG:%15.1f} [ {HSHMSTRG/HSsCLOCK*1.0e6:%7.1f} ]
hTRG2     = {HSSHODO13:%15.1f} [ {HSSHODO13/HSsCLOCK*1.0e6:%7.1f} ] (from SOS scaler)

aadc-sadc = {(HShBEAMGATES-HSsADCGATES):%15.1f} [ {(HShBEAMGATES-HSsADCGATES)/HSsCLOCK*1.0e6:%7.1f} ]

*hcomputer D.T. = {100*(1-HSHMSTRG/(HSHMSPRE+.0001)):%9.2f} % ( {100*(1-HSSHODO13/(HSSHODO9+.0001)):%6.2f} % from SOS scaler)
*helect.  D.T.  = {100*(60/50)*(HShPRE100-HShPRE150)/(HShPRE100+.0001):%9.2f} %
 PS1(calc)      = {((HSHMSTRG-HSCOINTRG)/(HShBEAMGATES-HSsADCGATES+.00001)):%9.1f}

sPSR      = {HSSOSPRE:%15.1f} [ {HSSOSPRE/HSsCLOCK*1.0e6:%7.1f} ]
sPSR2     = {HShUNUSED4:%15.1f} [ {HShUNUSED4/HSsCLOCK*1.0e6:%7.1f} ] (from HMS scaler)
sTRG      = {HSSOSTRG:%15.1f} [ {HSSOSTRG/HSsCLOCK*1.0e6:%7.1f} ]
sTRG2     = {HShUNUSED5:%15.1f} [ {HShUNUSED5/HSsCLOCK*1.0e6:%7.1f} ] (from HMS scaler)

aadc-hadc = {(HShBEAMGATES-HShADCGATES):%15.1f} [ {(HShBEAMGATES-HShADCGATES)/HSsCLOCK*1.0e6:%7.1f} ]

*scomputer D.T. = {100*(1-HSSOSTRG/(HSSOSPRE+.0001)):%9.2f} % ( {100*(1-HShUNUSED5/(HShUNUSED4+.0001)):%9.2f} % from HMS scaler)
*select    D.T. = {100*(60/50)*(HSsPRE100-HSsPRE150)/(HSsPRE100+.0001):%9.2f} %
 PS2(calc)      = {((HSSOSTRG-HSSHODO15)/(HShBEAMGATES-HShADCGATES+.00001)):%9.1f}

cPRE       = {HSCOINPRE:%15.1f} [ {HSCOINPRE/HSsCLOCK*1.0e6:%7.1f} ]
cPRE2      = {HSSHODO11:%15.1f} [ {HSSHODO11/HSsCLOCK*1.0e6:%7.1f} ] (from SOS scaler)
cTRG       = {HSCOINTRG:%15.1f} [ {HSCOINTRG/HSsCLOCK*1.0e6:%7.1f} ]
cTRG2      = {HSSHODO15:%15.1f} [ {HSSHODO15/HSsCLOCK*1.0e6:%7.1f} ] (from SOS scaler)

hms coin  D.T. = {100*(1-HSCOINTRG/(HSCOINPRE+.0001)):%9.2f} %
sos coin  D.T. = {100*(1-HSSHODO15/(HSSHODO11+.0001)):%9.2f} %
NEW coin  D.T. = {100*(1-HShPRE200/(HShPIONHI+.0001)):%9.2f} %

**********
*SUMMARY *
**********
Time of run        = {HShCLOCK/1.0e6:%8.2f} sec.

hdc1 6/6 eff = {(hdc_cham_hits[0]/hmsCham1Hits.npassed):%5.3f}  BAD = 0.99
hdc2 6/6 eff = {(hdc_cham_hits[1]/hmsCham1Hits.npassed):%5.3f}  BAD = 0.99
anyhs1x  eff = {anyhs1x.npassed/(hmscoin_event.npassed+.0001):%5.3f}  BAD = .99
anyhs1y  eff = {anyhs1y.npassed/(hmscoin_event.npassed+.0001):%5.3f}  BAD = .99
anyhs2x  eff = {anyhs2x.npassed/(hmscoin_event.npassed+.0001):%5.3f}  BAD = .99
anyhs2y  eff = {anyhs2y.npassed/(hmscoin_event.npassed+.0001):%5.3f}  BAD = .99


         I_avg           Q_tot             Q_tot
      (microAmps)   (microCoulombs)   (microAmp-hours)
BCM1 
BCM2 
BCM3 

hpretriggers  = 
htriggers     = 
hadcgates     = 
Computer D.T. = 
Elec. D.T.    = 

**************************
* Hodoscope Efficiencies *
**************************
Efficiencies for hodoscopes is the fraction of times scin. was hit when track
with chisquared/dof < {hstat_maxchisq:%5.1f} came within {hstat_slop:%4.1f} cm of the center.

Events examined = htrig       = {hmscoin_event.npassed:%7d}
Tracks found    = hcleantrack = {hCleanTrack.npassed:%7d}
Tracks passing chisquared cut = {HstatNumevents.npassed:%7d}

Scint  POS eff NEG eff  OR eff AND eff  Hits
-----  ------- ------- ------- -------  ----


*************************
* Cerenkov Efficiencies *
*************************
Good Track Requirements:
   1. Only one track found in the focal plane
   2. chisq/dof <  {hcer_chi2max:%6.2f}
   3. {hcer_beta_min:%6.2f} < beta < {hcer_beta_max:%6.2f}
   4. {hcer_et_min:%6.2f} < calorimeter energy < {hcer_et_max:%6.2f}
Threshold set at  {hcer_threshold:%6.2f}

Mirror 1 Efficiency = {H.cher.cerfiredcounter[0]/( H.cher.certrackcounter[0] + 0.0001 ):%5.3f}  
Mirror 1 {H.cher.cerfiredcounter[0]:%6d} of {H.cher.certrackcounter[0]:%6d} good tracks.
Mirror 2 Efficiency = {H.cher.cerfiredcounter[1]/( H.cher.certrackcounter[1] + 0.0001 ):%5.3f}  
Mirror 2 {H.cher.cerfiredcounter[1]:%6d} of {H.cher.certrackcounter[1]:%6d} good tracks.
Overall  Efficiency = {H.cher.cerfiredcounter[2]/( H.cher.certrackcounter[2] + 0.0001 ):%5.3f}  
Overall  {H.cher.cerfiredcounter[2]:%6d} of {H.cher.certrackcounter[2]:%6d} good tracks.

****************************
* Calorimeter Efficiencies *
****************************
Efficiencies for calorimeter is the fraction of times block was hit when track
with chisquared/dof < hstat_cal_maxchisq  which came within hstat_cal_slop cm of the center.
and hcer_npe_sum > 3.0 (hardwired).

Events examined = htrig       = 
Tracks found    = hcleantrack = 
Tracks passing chisquared cut = 

Block   eff    Hits
-----   ---    ----
hA1   
hA2   
hA3   
hA4   
hA5   
hA6   
hA7   
hA8   
hA9   
hA10  
hA11  
hA12  
hA13  

hB1   
hB2   
hB3   
hB4   
hB5   
hB6   
hB7   
hB8   
hB9   
hB10  
hB11  
hB12  
hB13  

hC1   
hC2   
hC3   
hC4   
hC5   
hC6   
hC7   
hC8   
hC9   
hC10  
hC11  
hC12  
hC13  

hD1   
hD2   
hD3   
hD4   
hD5   
hD6   
hD7   
hD8   
hD9   
hD10  
hD11  
hD12  
hD13  

hA    
hB    
hC    
hD    
end report hrep


--------------------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////
--------------------------------------------------------------------------------------


General Format
signal   =   counts (  rate-Hz )


Horizontal drift chamber z positions:
Chamber 1: {hdc_zpos[0]:%6.2f} {hdc_zpos[1]:%6.2f} {hdc_zpos[2]:%6.2f} 
	   {hdc_zpos[3]:%6.2f} {hdc_zpos[4]:%6.2f} {hdc_zpos[5]:%6.2f} 
Chamber 2: {hdc_zpos[6]:%6.2f} {hdc_zpos[7]:%6.2f} {hdc_zpos[8]:%6.2f} 
           {hdc_zpos[9]:%6.2f} {hdc_zpos[10]:%6.2f} {hdc_zpos[11]:%6.2f} 

The expression result can be formatted by putting a ":" followed by
a c-style format after the expression.

The HMS reconstruction coefficient file name is {h_recon_coeff_filename}
The names of the HMS drift chamber planes are: 
{hdc_plane_names}

DC Events: {hdc_tot_events}
Hit in chamber: {hdc_cham_hits[0]/hdc_tot_events:%.3f} {hdc_cham_hits[1]/hdc_tot_events:%.3f}
Hit in plane: {hdc_events[0]/hdc_tot_events:%.3f}  {hdc_events[1]/hdc_tot_events:%.3f} 
              {hdc_events[2]/hdc_tot_events:%.3f}  {hdc_events[3]/hdc_tot_events:%.3f} 
              {hdc_events[4]/hdc_tot_events:%.3f}  {hdc_events[5]/hdc_tot_events:%.3f} 
              {hdc_events[6]/hdc_tot_events:%.3f}  {hdc_events[7]/hdc_tot_events:%.3f} 
              {hdc_events[8]/hdc_tot_events:%.3f}  {hdc_events[9]/hdc_tot_events:%.3f} 
              {hdc_events[10]/hdc_tot_events:%.3f} {hdc_events[11]/hdc_tot_events:%.3f}

Run #{gen_run_number}
first event = {gen_run_starting_event:%7d}
last event  = {gen_event_id_number:%7d}

Later, such things as hardware scalers will be added to the set of variables
that can be used in expressions.


